<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="com.kh.spring.mybatis.MybatisRepository">	<!-- unique한 name지정 !! 매퍼안에 작성된 쿼리문은 여기서 namespace로 지정한 경로로 매핑됨 -->
  
  <!-- 
  		#{} vs ${}
  		
  		#{} : PreparedStatement에서 쿼리 템플릿을 완성 시킨 뒤에 파라미터값을 전달받아 쿼리를 완성. 
  			문자열 escape처리를 자동으로 해준다. => SQL Injection 공격에 안전한다.
  		  		
  		${} : 쿼리 템플릿이 생성되는 시점에 파라미터로 전달된 값을 사용해 쿼리 템플릿을 완성시킬 때 사용하는 기호. escape처리를 안함
  
   -->
  
  	<select id="selectRentAndMemberById" resultType="map">	<!-- java.util.Map의 별칭 -->
  		select * 
  		from member 
  		inner join rent_master using(user_id)
  		where user_id = #{userId} 
  	</select>
  	
  	<resultMap type="map" id="rentData">	<!-- 쿼리문 실행 태그가 아닌 resultMap="rentData"에 해당하는 결과값에 대한 template을 구성하는 태그 -->
  	<!-- 
  		column : map에 담을 컬럼명
  		javaType : map에 담을 때 어떤 타입의 데이터로 저장할 지를 결정
  		property : map에 담을 때 사용할 키값 (db의 스네이크표기법이 아닌 java의 카멜케이스로 담고자 할 때)
  	
  	 -->
  	 	<result column="user_id" javaType="string" property="userId"/>
  	 	<result column="title" javaType="string"/>		<!-- 컬럼명을 변경해 사용하지 않을 거라면 property 생략 -->
  	 	<result column="rent_book_cnt" javaType="int" property="rentBookCnt"/>
  	 	<result column="rm_idx" javaType="string" property="rmIdx"/>
  	 	<result column="reg_date" javaType="date" property="regDate"/>
  	 	<result column="rb_idx" javaType="string" property="rbIdx"/>
  	 	<result column="bk_idx" javaType="string" property="bkIdx"/>
  	</resultMap>
  	<select id="selectRentDataById" resultMap="rentData">
  		select user_id,title,rent_book_cnt,rm_idx,rm.reg_date,rb_idx,bk_idx
  		from rent_master rm
  		inner join member using(user_id) 
  		inner join rent_book using(rm_idx) 
  		where user_id = #{userId}
  	</select>

  	
  	<!-- 
  		마이바티스의 기본 statement 객체는 PreparedStatement를 사용한다.
  		다른 statement를 사용해야 할 경우 statementType 속성을 사용해 변경이 가능하다.
  		STATEMENT, PREPARED, CALLABLE
  	 -->
<!--   	<insert id="procedure" statementType="CALLABLE">
  		{call sp_rent_extend(#{rbIdx, mode=IN})}	매개변수가 IN인지, OUT인지 INOUT인지 적어주어야 함
  	</insert>
  	 -->
  	
  	<select id="dynamicQueryIf" resultType="map">
  		select * from book where
  		<if test="searchType == 'info'">
  			info like '%'||#{keyword}||'%'
  		</if> 
  		<if test="searchType == 'author'">
  			author like '%'||#{keyword}||'%'
  		</if>
  	</select>
  	
  	<select id="dynamicQueryChoose" resultType="map">
  		select * from book where
  		<choose>
  			<when test="searchType == 'info'">
  				info like '%'||#{keyword}||'%'
  			</when>
  			<when test="searchType == 'author'">
  				author like '%'||#{keyword}||'%'
  			</when>
  			<otherwise>
  				title like '%'||#{keyword}||'%'
  			</otherwise>
  		</choose>
  	</select>
  	
  	<select id="dynamicQueryWhereAndForeachTag" resultType="map">
  		select * from book
  		<where>												<!-- where태그는 where 이후 처음 등장하는 논리 연산자에 대해 알아서 무시해준다. -->
  			<foreach collection="searchTypes" item="type">	<!-- collection=리스트 또는 배열을 의미(map에 담은 배열의 key값) -->
  				<if test="type == 'rentable'">
  					or book_amt > 0
  				</if>
  				<if test="type =='title'">
  					and title like '%'||#{keyword}||'%'
  				</if>
  				<if test="type =='author'">
  					or author like '%'||#{keyword}||'%'
  				</if>
  			</foreach>  		
  		</where>
  	</select>
  	
  	<select id="dynamicQueryForeachTagWithList" resultType="map">
  		select * from member
  		where user_id in 
  		<foreach collection="list" item="userId" open="(" close=")" separator=",">		<!-- open/close : in('a','b','c'),  separator : forEach돌면서 구분자로 활용-->
  			#{userId}																	<!-- map에 담은 list가 아니면 collection="list"로 입력 -->
  		</foreach>
  	</select>
<!--   	
  	<insert id="insertTemplate">
  		insert into ${tableName}
  		forEach의 collection에 map을 넘길 경우, index속성에 key값을 저장 -> index를 돌면서 key 정보를 가져옴
  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
  			${key}		insert into 테이블 (컬럼명,컬럼명,,,,,)
  		</foreach>
  		values
  		<foreach collection="data" index="key" item="val" open="(" close=")" separator=",">
  			#{val}
  		</foreach>
  	
  	</insert> -->
  	
  	<insert id="insertTemplate">
  		insert into ${tableName}
  		<if test="primaryKey != null">	<!-- 시퀀스가 필요한 컬럼이 존재 -->
	  		(${primaryKey.col}
	  		<!-- forEach의 collection에 map을 넘길 경우, index속성에 key값을 저장 -> index를 돌면서 key 정보를 가져옴 -->
	  		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
	  			${key}		<!-- insert into 테이블 (컬럼명,컬럼명,,,,,) -->
	  		</foreach>
	  		values (${primaryKey.data}
	  		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
	  			#{val}
	  		</foreach>  		
  		</if>
		<if test="primaryKey == null">	<!-- 시퀀스가 필요없는 컬럼만 존재 -->
	  		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
	  			${key}		<!-- insert into 테이블 (컬럼명,컬럼명,,,,,) -->
	  		</foreach>
	  		values
	  		<foreach collection="data" index="key" item="val" open="," close=")" separator=",">
	  			#{val}
	  		</foreach>  		
		</if>
  	</insert>
  	
  	<update id="dynamicQuerySetTag">	<!-- 사용자로부터 수정할 데이터 담아 보내 update쿼리 작성 -->
  		update member
  		<set>
  			<if test="password != null">
  				password = #{password}
  			</if>
  			<if test="tell != null">
  				,tell = #{tell}
  			</if>
  			<if test="email != null">
  				,email = #{email}
  			</if>			
  		</set>
  		where user_id = #{userId}
  	</update>
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	
  	<!-- 퀴즈 -->
  	<insert id="test01">
  		insert into book (title,author,bk_idx)
  		values(#{title},#{author},sc_bk_idx.nextval)
  	</insert>
  	<update id="test02">
  		update rent_book
  		set extension_cnt = 0
  		where extension_cnt >= ${extensionCnt}
  	</update>
  	<delete id="test03">
  		delete from member
  		where reg_date &lt; '2021/10/01'		<!-- 부등호 &lt; &lte; &gt; &gte -->
  		and reg_date > '2021/09/01'
  	</delete>
  	<select id="test04" resultType="map">
  		select * 
  		from (select ROWNUM, b.* from book b 
  			order by rent_cnt DESC)
  		where ROWNUM <![CDATA[ < ]]> 4
  	</select>
  </mapper>